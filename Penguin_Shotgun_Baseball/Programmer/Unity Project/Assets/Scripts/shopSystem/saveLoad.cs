using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.SceneManagement; using UnityEngine.UI;  using System; using System.Runtime.Serialization.Formatters.Binary; using System.IO;  public class saveLoad : MonoBehaviour { 	public GameObject moneyEarned; 	public GameObject player; 	GameObject slider; 	float pointAnimDurationSec = 2f; 	float pointAnimTimer = 0f; 	float currentScore = 0; 	float savedDisplayedScore = 0; 	public bool moneyAdded = false; 	GameObject Bus;  	[System.Serializable] 	public class SaveData 	{ 		public List<weapons> shopList = new List<weapons>(); 		public float money; 		public int currentWeaponID; 	}  	public void Saving() 	{ 		SaveData data = new SaveData(); 		data.money = gameManager.gameManagerr.getMoney(); 		data.currentWeaponID = gameManager.gameManagerr.currentWeaponID; 		// add all weapons from weapon shop list 		for (int i = 0; i < weaponsShop.WeaponShop.weaponList.Count; i++) { 			data.shopList.Add(weaponsShop.WeaponShop.weaponList[i]); 		}  		BinaryFormatter bf = new BinaryFormatter();  		FileStream stream = new FileStream(Application.persistentDataPath+"/shop.sav", FileMode.Create);  		bf.Serialize(stream, data); 		stream.Close();  		print("Saved!"); 	}  	public void Load() 	{ 		if (File.Exists (Application.persistentDataPath + "/shop.sav")) { 			BinaryFormatter bf = new BinaryFormatter (); 			FileStream stream = new FileStream (Application.persistentDataPath + "/shop.sav", FileMode.Open);  			SaveData data = (SaveData)bf.Deserialize (stream); 			gameManager.gameManagerr.setMoney (data.money); 			gameManager.gameManagerr.currentWeaponID = data.currentWeaponID; 			stream.Close ();  			for (int i = 0; i < data.shopList.Count; i++) { 				// update shop 				weaponsShop.WeaponShop.weaponList [i] = data.shopList [i]; 				// update all sprites 				weaponsShop.WeaponShop.updateSprite (weaponsShop.WeaponShop.weaponList [i].weaponID); 				// update all buttons 				gameManager.gameManagerr.currentWeaponID = weaponsShop.WeaponShop.weaponList [i].weaponID; 					gameManager.gameManagerr.currentWeaponType = "Shotgun"; 					weaponsShop.WeaponShop.loadBuyButtons ();  					gameManager.gameManagerr.currentWeaponType = "Bullet"; 					weaponsShop.WeaponShop.loadBuyButtons ();  					gameManager.gameManagerr.currentWeaponType = "Ammo"; 					weaponsShop.WeaponShop.loadBuyButtons ();   			} 			Debug.Log("Loaded!"); 		}  else { 			Debug.Log ("No file found!"); 		} 	}  	public void delete() 	{ 		if (File.Exists (Application.persistentDataPath + "/shop.sav")) { 			File.Delete (Application.persistentDataPath + "/shop.sav"); 			//Debug.Log ("Deleted"); 		} 	} 	// Use this for initial	ization 	void Start () { 		slider = GameObject.Find ("Canvas/Slider"); 		moneyEarned = GameObject.Find ("Canvas/moneyEarned"); 		Bus = GameObject.Find ("Bus"); 		//delete (); 	}  	// Update is called once per frame 	void Update () 	{ 		if ((player.GetComponent<Rigidbody2D>().velocity.x == 0 && player.GetComponent<Rigidbody2D>().velocity.y == 0 && slider.GetComponent<PowerControl>().fired == true && player.GetComponent<Rigidbody2D>().gravityScale == 1 && player.GetComponent<fireGun>().bulletAmount == 0) || player.activeSelf == false) 		{ 			savedDisplayedScore = 0f; 			currentScore = Mathf.RoundToInt(player.transform.position.x); 			pointAnimTimer += Time.deltaTime; 			float prcComplete = pointAnimTimer / pointAnimDurationSec; 			moneyEarned.GetComponent<Text>().text = "$" + Mathf.RoundToInt(Mathf.Lerp(savedDisplayedScore, currentScore, prcComplete)).ToString();  			Debug.Log (moneyEarned.GetComponent<Text> ().text + ".."); 			Debug.Log (currentScore.ToString ()); 			if(String.Equals(moneyEarned.GetComponent<Text>().text,"$" + currentScore.ToString()) == true) 			{ 				moneyEarned.GetComponent<Text>().text = "+$" + currentScore.ToString(); 			} 		} 	}  	public IEnumerator loadNewRound() 	{ 		yield return new WaitForSeconds (0.25f); 		gameObject.GetComponent<gameManager> ().addMoney (currentScore); 		Saving (); 		moneyAdded = true; 		//Debug.Log ("what..?"); 		SceneManager.LoadScene ("TestScene"); 	} }  